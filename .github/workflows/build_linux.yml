name: build linux release

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  JAVA_VERSION: "17.x"
  FLUTTER_VERSION: "3.27.4"
  FLUTTER_CHANNEL: 'stable'
  FLUTTER_CHANNEL_ARM64: 'master' # stable it not working on arm64, so we have to use master. see https://github.com/subosito/flutter-action/issues/345
  PROPERTIES_PATH: "./android/key.properties"
  STOREFILE_PATH: "key.jks"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_x64:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        java-version: ${{env.JAVA_VERSION}}
        distribution: adopt
        
    - run: |
        # Creating the key.properties file
        echo storePassword=${{ secrets.STORE_PASSWORD }} > ${{env.PROPERTIES_PATH}}
        echo keyPassword=${{ secrets.KEY_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
        echo keyAlias=${{ secrets.KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
        echo storeFile=${{ env.STOREFILE_PATH }} >> ${{env.PROPERTIES_PATH}}
        # '>' = overwrites '>>' = appends
    # Decoding base64 key into a file
    - run: |
        # create key.jks
        echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/key.jks
    
    - uses: subosito/flutter-action@v2
      with:
        channel: ${{env.FLUTTER_CHANNEL}}
        flutter-version: ${{env.FLUTTER_VERSION}}
        cache: true
        cache-key: "${{ runner.OS }}-flutter-install-cache"
    - run: flutter --version
    - run: flutter pub get
    - run: flutter gen-l10n # generate translation strings
    - run: flutter test
    - run: flutter build linux --target-platform linux-x64
    - uses: actions/upload-artifact@v4
      with:
        name: FOSSWarn-linux-x64-bundle
        path: build/linux/x64/release/bundle/
    
        
  build_arm64:
    # use arm64 runner as we can not cross compile from x64 -> arm64
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        java-version: ${{env.JAVA_VERSION}}
        distribution: adopt
        
    - run: |
        # Creating the key.properties file
        echo storePassword=${{ secrets.STORE_PASSWORD }} > ${{env.PROPERTIES_PATH}}
        echo keyPassword=${{ secrets.KEY_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
        echo keyAlias=${{ secrets.KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
        echo storeFile=${{ env.STOREFILE_PATH }} >> ${{env.PROPERTIES_PATH}}
        # '>' = overwrites '>>' = appends
    # Decoding base64 key into a file
    - run: |
        # create key.jks
        echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/key.jks
    
    - uses: subosito/flutter-action@v2
      with:
        channel: ${{env.FLUTTER_CHANNEL_ARM64}}
        flutter-version: ${{env.FLUTTER_VERSION}}
        cache: true
        cache-key: "${{ runner.OS }}-flutter-install-cache"
    - run: flutter --version
    - run: flutter pub get
    - run: flutter gen-l10n # generate translation strings
    - run: flutter test
    - run: flutter build linux --target-platform linux-arm64
    - uses: actions/upload-artifact@v4
      with:
        name: FOSSWarn-linux-arm64-bundle
        path: build/linux/arm64/release/bundle/
